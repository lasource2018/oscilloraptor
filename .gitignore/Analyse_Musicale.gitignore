import math
import wave, struct
from struct import *
from time import sleep
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from music21 import *

def lecture_Son(nomFichier) :
    
    data = []
    f = wave.open(nomFichier, 'rb')

    nbreCanaux = f.getnchannels()
    nbreEchant = f.getnframes()
    tailleEchant = f.getsampwidth()
    fech = f.getframerate()
    """
    print("Nombre de canaux :", nbreCanaux)
    print("Féquence d'échantillonnage :", fech)
    print("Taille de chaque échantillon :", tailleEchant, "octets")
    print("Nombre d'échantillons :", nbreEchant)

    print("Lecture du fichier...")
    """
    if tailleEchant == 2 :
        for i in range(nbreEchant) :
            b = f.readframes(1)
            val = struct.unpack('h', b)
            data.append(val[0])
    elif tailleEchant == 1 :
        for i in range(nbreEchant) :
            b = f.readframes(1)
            val = struct.unpack('b', b)
            data.append(val[0])
    else :
        print("Format de fichier non reconnu")
        
    
    return data,nbCanaux,nbreEchant,fech


def Ecriture_Son(nomFichier, listeEch) :

    fech = 44100    #par défault pour le moment, mais peut être choisit par l'utilisateur
    nbreOctets = 2
    nbreCanaux = 1
    
    nbreEchant = len(listeEch)
    parametres = (nbreCanaux, nbreOctets,fech, nbreEchant, 'NONE', 'notcompressed')
    
    print("Enregistrement du fichier...")
    
    Liste = []
    for i in range(nbreEchant) :
        b = struct.pack('h',listeEch[i])
        Liste.append(b[0])
        Liste.append(b[1])
    
    data = bytes(Liste)
    
    f = wave.open(nomFichier, 'wb')
    f.setparams(parametres)
    f.writeframes(data)
    f.close()


oc = { "Do": 131, "Do#": 139, "Re": 147, "Re#": 156, "Mi": 165, "Fa": 175, "Fa#": 185, "Sol": 196, "Sol#": 208, "La": 220, "Sib" :233, "Si" : 247 }

oc2 = { "Do": 262, "Do#": 277, "Re": 294, "Re#": 311, "Mi": 330, "Fa": 349, "Fa#": 370, "Sol": 392, "Sol#": 415, "La": 440, "Sib" :466, "Si" : 494, "Do2" : 523 }

DoM = [oc["Do"],oc["Re"],oc["Mi"],oc["Fa"],oc["Sol"],oc["La"],oc["Si"],oc2["Do"] ] 

#Gammes avec #
SolM = [oc["Sol"],oc["La"],oc["Si"],oc2["Do"],oc2["Re"],oc2["Mi"],oc2["Fa#"],oc2["Sol"]]
ReM = [oc["Re"],oc["Mi"],oc["Fa#"],oc["Sol"],oc["La"],oc["Si"],oc2["Do#"],oc2["Re"]]
LaM = [oc["La"],oc["Si"],oc2["Do#"],oc2["Re"],oc2["Mi"],oc2["Fa#"],oc2["Sol#"],oc2["La"]] 
MiM = [oc["Mi"],oc["Fa#"],oc["Sol#"],oc["La"],oc["Si"],oc2["Do#"],oc2["Re#"],oc2["Mi"]] 
SiM = [oc["Si"],oc2["Do#"],oc2["Re#"],oc2["Mi"],oc2["Fa#"],oc2["Sol#"],oc2["Sib"],oc2["Si"]] 
Fa_M = [oc["Fa#"],oc["Sol#"],oc["Sib"],oc["Si"],oc2["Do#"],oc2["Re#"],oc2["Fa"],oc2["Fa#"]] 
Do_M = [oc["Do#"],oc["Re#"],oc["Fa"],oc["Fa#"],oc["Sol#"],oc["Sib"],oc["Do"],oc2["Do#"]]

#Gammes avec bémol
# A faire


def ecrire_gamme(nom_fichier,gamme,amplitude,tps_note):
    E = []
    n = gamme
    for i in range(len(n)):
        O = [int(round(amplitude*math.sin(2*math.pi*n[i]*t*(1/44100)))) for t in  range(44100*tps_note)]
        E.extend(O)
    Ecriture_Son(nom_fichier, E)
    
ecrire_gamme("gamme_SolM.wav",SolM,5000,1)


def func(x,a,b,c):
    return c * np.exp( -np.power( (x-a)/b, 2) )
 
plt.ion()   # utilise pyplot en interactif
 
# Ouverture du fichier wav a decrypter
f,x, nbCanaux, nbFrames, fech = lecture_Son("gamme.wav")

#Decouper le fichier pour analyser chaque note après l'autre 
frequences, freq_gauss = [], []
larg_frame = 44100
for posi in range(0,nbFrames,larg_frame):
 
    # Sequence contenant une note
    f.setpos(posi)
    donnee = f.readframes(larg_frame)
    data = struct.unpack('%sh' % (larg_frame*nbCanaux ), donnee)

    # Transformee de Fourier
    w     = np.fft.fft(data)
    sig   = np.real(w * w.conjugate())
    freqs = np.fft.fftfreq(len(w)) * nbFrames
 
    # Estimation de la frequence
    idx = np.argmax(sig)
    f0, maxi = np.abs(freqs[idx]), sig[idx]
    frequences.append( f0 )
    
    #Ajustement par une gaussienne
    ind = np.where( np.abs(freqs - f0) < 20 )
    popt, pcov = curve_fit( func, freqs[ind], sig[ind]/maxi, p0=[f0,1,1] )
    a, b, c = popt
    freq_gauss.append(a)
    

f.close()
  
for res in (frequences,freq_gauss):
    print(np.round(res, 0))
#Analyse des Fréquences fournit soit par le générateur ou l'analyseur 
"""    
A = [261.63, 293.66, 329.63, 349.23, 392.00,440.00, 493.88]
#F
B = [349.23, 392.00, 440.00, 493.88,523.25, 587.33,659.26]
#A aéolien
L = [3520.00, 3951.07,4186.01,4698.64,5274.04, 5587.65,6271.93]
Diese = 1
"""

#variable et Tableau

ListeNote = []
#La liste va contenir le nom des notes sous la notation anglaise "A,B,C,D,E,F,G"
ListeOctaveNote = []
#contient la hauteur de la note par rapport à un chiffre allant de 0 à 7
ListeFrequenceJuste = []
#contient les fréquences accordées, afin de réduire les erreures de calcules 
ListeNoteMusic21 = []
TailleListePrincipale = len(L)


#création des listes de notes 
for loop in range(TailleListePrincipale):
    a = L[loop]
    n = 0
    # pour reconnaitre les notes, on les transpose à l'octave 3. Cela permet une meilleur optimisation
    while a < 255 or a > 500 :
        if a < 255:
            a = a * 2
            n = n - 1
        elif a > 500:
            a = a/2
            n = n + 1
    n = n + 3
    ListeOctaveNote.append(n)
    if a < 263 and a > 259:
        ListeNote.append("C")
        #calcule de la valeur exacte de la fréquence de la note 
        a = 261.63 * 2 **(n-3)
        ListeFrequenceJuste.append(a)
    elif a < 279 and a > 275 :
        # pour changer l'affichage de la sortie 
        if Diese == 1:
            ListeNote.append("C#")
            a = 277.18 * 2 ** (n-3)
            ListeFrequenceJuste.append(a)
        else:
            ListeNote.append("Db")
            a = 277.18 * 2 ** (n-3)
            ListeFrequenceJuste.append(a)
    elif a < 295 and a > 290:
        ListeNote.append("D")
        a = 293.66 * 2 **(n-3)
        ListeFrequenceJuste.append(a)
    elif a < 313 and a > 309:
        if Diese == 1 :
            ListeNote.append("D#")
            a = 311.13 * 2 ** (n-3)
            ListeFrequence.append(a)
        else:
            ListeNote.append("Eb")
            a = 311.13 * 2 ** (n-3)
            ListeFrequence.append(a)
    elif a < 332 and a > 326:
        ListeNote.append("E")
        a = 329.63 * 2 **(n-3)
        ListeFrequenceJuste.append(a)
    elif a < 351 and a > 346:
        ListeNote.append("F")
        a = 349.23 * 2 ** (n-3)
        ListeFrequenceJuste.append(a)
    elif a < 371 and a > 366:
        if Diese == 1:
            ListeNote.append("F#")
            a = 369.99 * 2 ** (n-3)
            ListeFrequenceJuste.append(a)
        else :
            ListeNote.append("Gb")
            a = 369.99 * 2 ** (n-3)
            ListeFrequenceJuste.append(a)
    elif a < 395 and a > 389:
        ListeNote.append("G")
        a = 392.00 * 2 ** (n-3)
        ListeFrequenceJuste.append(a)
    elif a < 418 and a > 412:
        if Diese == 1:
            ListeNote.append("G#")
            a = 415.30 * 2 ** (n-3)
            ListeFrequenceJuste.append(a)
        else :
            ListeNote.append("Ab")
            a = 415.30 * 2 ** (n-3)
            ListeFrequenceJuste.append(a)
    elif a < 443 and a > 437:
        ListeNote.append("A")
        a = 440.00 * 2 ** (n-3)
        ListeFrequenceJuste.append(a)
    elif a < 469 and a > 463:
        if Diese == 1:
            ListeNote.append("A#")
            a= 466.16 * 2 **(n-3)
            ListeFrequenceJuste.append(a)
        else:
            ListeNote.append("Bb")
            a= 466.16 * 2 **(n-3)
            ListeFrequenceJuste.append(a)
            
    elif a < 496 and 490:
        ListeNote.append("B")
        a = 493.88 * 2 ** (n-3)
        ListeFrequenceJuste.append(a)
"""
print(ListeNote)
print(ListeOctaveNote)
"""

#fonction pour reconnaitre un intervalle, ou pour donner la position dans la liste
def ton(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        #calcule du rapport des frequence entre la note tonales et les autre notes
        quotient = L[Loop]/L[0]
        #rapport s'approche de 
        if quotien < 1.16 and > 1.10
            return True
            break
def tiercemaj(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[0]
        if quotien <1.26 and quotien > 1.24:
            return True
            break
def tiercemin(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[0]
        if quotien < 1.23 and quotient > 1.18
            return True
            break
def quartejuste(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[0]
        if quotien < 1.34 and quotien > 1.32:
            return True
            break

def posquartejuste(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[0]
        if quotien < 1.34 and quotien > 1.32:
            return loop
            break
    
def posquintejuste(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[0]
        if quotien >1.49  and quotien < 1.51:
            return loop
            break
def quintejuste(L):
    TailleListe = len(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[0]
        if quotien >1.49  and quotien < 1.51:
            return True
            break
def sixtemaj(L):
    TailleListe = len(L)
    positionquarte = posquartejuste(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[positionquarte]
        if quotien > 1.33 and quotien < 1.37:
            return True
            break
def septiememaje(L):
    TailleListe = len(L)
    positionquinte = posquintejuste(L)
    for loop in range(TailleListe):
        quotien = L[loop]/L[positionquinte]
        if quotien <1.26 and quotien > 1.24:
            return True
            break
def neuviememaj(L):
    TailleListe = len(L)
    positionquinte = posquintejuste(L)
    valeurneuvieme = (L[positionquinte] * (3/2))/2
    for loop in range(TailleListe):
        quotien = L[loop]/valeurneuvieme
        if quotien > 0.9 and quotien <1 :
            return True
            break

#détection de gammes 
elif TailleListePrincipale >= 7:
    if tiercemaj(ListeFrequenceJuste):
        if quartejuste(ListeFrequenceJuste):
            if septiememaje(ListeFrequenceJuste):
                print(ListeNote[0], end = " ")
                print("Ionien")
            else:
                print(ListeNote[0], end = " ")
                print("Mixolydien")
        else :
            print(ListeNote[0], end= " ")
            print("lydien")
    else :
        if quintejuste(ListeFrequenceJuste):
            if sixtemaj(ListeFrequenceJuste):
                if neuviememaj(ListeFrequenceJuste):
                    print(ListeNote[0], end = " ")
                    print("Aéolien")
                else:
                    print(ListeNote[0],end = " ")
                    print("Phrygien")
            else:
                print(ListeNote[0], end = " ")
                print("Dorien")
        else:
            print(ListeNote[0], end = " ")
            print("Locrien")

#Détections d'accords            
elif TailleListePrincipale > 2 and TailleListePrincipale <= 5:
    if TailleListePrincipale == 3 :
        if tiercemaj(ListeFrequenceJuste):
            if quintejuste(ListeFrequenceJuste):
                print(ListeNote[0], end ="")
            elif
                print(ListeNote[0], end ="")
                print("6")
            else:
                print("Unknown Chord")
        elif tiercemin(ListeFrequenceJuste):
            if quintejuste(ListeFRequenceJuste):
                print(ListeNote[0], end ="")
                print("m")
            elif
                print(ListeNote[0], end = "")
                print("m6")
            else:
                print("Unknown Chord")
        elif quartejuste(ListeFrequenceJuste):
            if quintejuste(ListeFrequenceJuste):
                print(ListeNote[0], end ="")
                print("sus4")
            else :
                print("Unknown Chord")
        elif neuviememaj(ListeFrequenceJuste):
            if quintejuste(ListeFrequenceJuste):
                print(ListeNote[0], end ="")
                print("sus2")
        elif octave(ListeFrequenceJuste):
            if quintejuste(ListeFrequenceJuste):
                print(ListeNote[0], end ="")
                print("PowerChord HEEEELL YEAH")
            elif:
                print("Unknown Chord")
        else:
            print("Unknown Chord")
    if TailleListePrincipale == 4:
        if septiememaj(ListeFrequenceJuste):
            if tiercemaj(ListeFrequenceJuste):
                if quintejuste(ListeFrequenceJuste):
                    print(ListeNote[0], end ="")
                elif
                    print(ListeNote[0], end ="")
                    print("6/7")
                else:
                    print("Unknown Chord")
            elif tiercemin(ListeFrequenceJuste):
                if quintejuste(ListeFRequenceJuste):
                    print(ListeNote[0], end ="")
                    print("m7")
                elif
                    print(ListeNote[0], end = "")
                    print("m6/7")
                else:
                    print("Unknown Chord")
            elif quartejuste(ListeFrequenceJuste):
                if quintejuste(ListeFrequenceJuste):
                    print(ListeNote[0], end ="")
                    print("sus4/7")
                else :
                    print("Unknown Chord")
            elif neuviememaj(ListeFrequenceJuste):
                if quintejuste(ListeFrequenceJuste):
                    print(ListeNote[0], end ="")
                    print("sus2/7")
                else:
                    print("Unknown Chord")                    
        elif septiememin(ListeFrequence Juste):

        else :
            print("Unknown Chord")
    else:
        print("Unknown Chord")
#détection d'intervalles            
elif TailleListePrincipale == 2:
    elif tiercemaj(ListeFrequenceJuste):
        print("Tierce Majeur")    
    elif quartejuste(ListeFrequenceJuste):
        print("QuarteJuste")
    elif quintejuste(ListeFrequenceJuste):
        print("Quinte Juste")              
    elif sixtemaj(ListeFrequenceJuste):
        print("Sixte Majeur")
#sortie Si une note pour dire la quelle s'est   
elif TailleListePrincipale == 1:
    print(ListeNote[0], end ="")
    print(LIsteOctaveNote[0], end"")

"""       
affichage gamme
besoin des liste ListeNote et ListeOctaveNote
pour les transformer en liste music21
"""
stream1 = stream.Stream()
for loop in range(TailleListePrincipale):
    f = note.Note("C4")
    f.name = ListeNote[loop]
    f.octave = ListeOctaveNote[loop]
    stream1.append(f)
stream1.show()    
 
